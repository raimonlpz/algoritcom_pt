/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.2 public/models/AnimatedCharacter.glb -o src/components/AnimatedCharacter.jsx -r public 
*/

import React, { useEffect, useMemo, useRef, useState } from 'react'
import { useFrame, useGraph } from '@react-three/fiber'
import { useGLTF, useAnimations, Text } from '@react-three/drei'
import { SkeletonUtils } from 'three-stdlib'
import { eventsPlayerAtom, userAtom } from '../atoms'
import { useAtom } from 'jotai'
import { socket } from '../api/SocketProvider'
import { useGrid } from '../hooks/useGrid'
import { PLAYER_RUN_SPEED } from '../utils/constants'


export function Player({
  id,
  name,
  ...props
}) {

  const position = useMemo(() => props.position, [])
  const [path, setPath] = useState();
  const { gridToVector3 } = useGrid();

  const group = useRef()
  const { scene, animations } = useGLTF('/models/AnimatedCharacter.glb')
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])
  const { nodes, materials } = useGraph(clone)
  const { actions } = useAnimations(animations, group)
  const [animation, setAnimation] = useState("Idle");

  const [user] = useAtom(userAtom)
  const [eventsPlayer, setEventsPlayer] = useAtom(eventsPlayerAtom)


  useEffect(() => {
    const path = [];
    props.path?.forEach((gridPos) => {
      path.push(gridToVector3(gridPos));
    })
    setPath(path);
  }, [props.path])

  useEffect(() => {
    actions[animation].reset().fadeIn(0.32).play()
    return () => actions[animation]?.fadeOut(0.32);
  }, [animation]);

  // JUMP in/out |Â Dance in/out
  useEffect(() => {
    if (id === eventsPlayer.jump && animation !== 'Run') {
      setAnimation('Jump');
      setTimeout(() => {
        setAnimation('Idle');
        setEventsPlayer({
          ...eventsPlayer,
          jump: null
        })
      }, 1000);
    }

    if (id === eventsPlayer.dance && animation !== 'Run') {
      setAnimation('Dance');
      setTimeout(() => {
        setAnimation('Idle');
        setEventsPlayer({
          ...eventsPlayer,
          dance: null
        })
      }, 3000);
    }

    window.addEventListener('keydown', handleKeyDown);
    return () => {
      window.removeEventListener('keydown', handleKeyDown);
    };
  }, [eventsPlayer]);

  const handleKeyDown = (event) => {
    if (user === id) {
      if (event.code === 'Space') {
        event.preventDefault(); 
        socket.emit('jump', id)
      }
      if (event.key === 'd' || event.key === 'D') {
        event.preventDefault(); 
        socket.emit('dance', id)
      }

      if (event.code === 'Enter') {
       // shootBeer();
      }
    }
  };


  useFrame((state) => {
    if (path?.length && group.current.position.distanceTo(path[0]) > 0.1) {
      const direction = group.current.position
        .clone()
        .sub(path[0])
        .normalize()
        .multiplyScalar(PLAYER_RUN_SPEED);
      group.current.position.sub(direction);
      group.current.lookAt(path[0]);
      setAnimation("Run");
    } else if (path?.length) {
      path.shift();
    } else {
      if (animation === 'Jump') setAnimation("Jump")
      else if (animation === 'Dance') setAnimation("Dance");
      else setAnimation("Idle")
    }
    if (id === user) {
      state.camera.position.x = group.current.position.x + 6;
      state.camera.position.y = group.current.position.y + 6;
      state.camera.position.z = group.current.position.z + 6;
      state.camera.lookAt(group.current.position);
    }


  });

  return (

      <group ref={group} {...props} position={position} dispose={null} name={`player-${id}`}>
        <group name="Scene">
          <group name="AvatarRoot001" rotation={[Math.PI / 2, 0, 0]}>
            <primitive object={nodes.Hips} />
            <skinnedMesh castShadow name="AvatarBody" geometry={nodes.AvatarBody.geometry} material={materials.AvatarBody} skeleton={nodes.AvatarBody.skeleton} />
            <skinnedMesh castShadow name="AvatarLeftCornea" geometry={nodes.AvatarLeftCornea.geometry} material={materials.AvatarLeftCornea} skeleton={nodes.AvatarLeftCornea.skeleton} />
            <skinnedMesh castShadow name="AvatarLeftEyeball" geometry={nodes.AvatarLeftEyeball.geometry} material={materials.AvatarLeftEyeball} skeleton={nodes.AvatarLeftEyeball.skeleton} />
            <skinnedMesh castShadow name="AvatarRightCornea" geometry={nodes.AvatarRightCornea.geometry} material={materials.AvatarRightCornea} skeleton={nodes.AvatarRightCornea.skeleton} />
            <skinnedMesh castShadow name="AvatarRightEyeball" geometry={nodes.AvatarRightEyeball.geometry} material={materials.AvatarRightEyeball} skeleton={nodes.AvatarRightEyeball.skeleton} />
            <skinnedMesh castShadow name="AvatarTeethUpper" geometry={nodes.AvatarTeethUpper.geometry} material={materials.AvatarTeethUpper} skeleton={nodes.AvatarTeethUpper.skeleton} />
            <skinnedMesh castShadow name="outfit_bottom" geometry={nodes.outfit_bottom.geometry} material={materials.outfit_bottom} skeleton={nodes.outfit_bottom.skeleton} />
            <skinnedMesh castShadow name="outfit_shoes" geometry={nodes.outfit_shoes.geometry} material={materials.outfit_shoes} skeleton={nodes.outfit_shoes.skeleton} />
            <skinnedMesh castShadow name="outfit_top" geometry={nodes.outfit_top.geometry} material={materials.outfit_top} skeleton={nodes.outfit_top.skeleton} />
            <skinnedMesh castShadow name="AvatarEyelashes" geometry={nodes.AvatarEyelashes.geometry} material={materials.AvatarEyelashes} skeleton={nodes.AvatarEyelashes.skeleton} morphTargetDictionary={nodes.AvatarEyelashes.morphTargetDictionary} morphTargetInfluences={nodes.AvatarEyelashes.morphTargetInfluences} />
            <skinnedMesh castShadow name="AvatarHead" geometry={nodes.AvatarHead.geometry} material={materials.AvatarHead} skeleton={nodes.AvatarHead.skeleton} morphTargetDictionary={nodes.AvatarHead.morphTargetDictionary} morphTargetInfluences={nodes.AvatarHead.morphTargetInfluences} />
            <skinnedMesh castShadow name="AvatarTeethLower" geometry={nodes.AvatarTeethLower.geometry} material={materials.AvatarTeethLower} skeleton={nodes.AvatarTeethLower.skeleton} morphTargetDictionary={nodes.AvatarTeethLower.morphTargetDictionary} morphTargetInfluences={nodes.AvatarTeethLower.morphTargetInfluences} />
          </group>
        </group>
        <Text
          position={[0, 1.85, 0]} // Adjust to control the text height above the avatar
          fontSize={0.08}
          color={id === user ? 'lime' : 'gray'}
          anchorX="center"
          anchorY="middle"
          rotation={[0, 0, 0]} // Ensure the text doesn't rotate
        >
          {name}
        </Text>
      </group>

  )
}

useGLTF.preload('/models/AnimatedCharacter.glb')
