/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.2 public/models/AnimatedCharacter.glb -o src/components/AnimatedCharacter.jsx -r public 
*/

import React, { useEffect, useState } from 'react'
import { useGraph } from '@react-three/fiber'
import { useGLTF, useAnimations, Billboard, Text } from '@react-three/drei'
import { SkeletonUtils } from 'three-stdlib'
import { userAtom } from '../atoms'
import { useAtom } from 'jotai'

export function AnimatedCharacter({
  id,
  name,
  ...props
}) {
  const group = React.useRef()
  const { scene, animations } = useGLTF('/models/AnimatedCharacter.glb')
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])
  const { nodes, materials } = useGraph(clone)
  const { actions } = useAnimations(animations, group)
  const [animation, setAnimation] = useState("Walk");

  const [user] = useAtom(userAtom)

  useEffect(() => {
    actions[animation].reset().fadeIn(0.32).play();
    return () => actions[animation]?.fadeOut(0.32);
  }, [animation]);

  return (
    <>
      <group ref={group} {...props} dispose={null}>
        <group name="Scene">
          <group name="AvatarRoot001" rotation={[Math.PI / 2, 0, 0]}>
            <primitive object={nodes.Hips} />
            <skinnedMesh name="AvatarBody" geometry={nodes.AvatarBody.geometry} material={materials.AvatarBody} skeleton={nodes.AvatarBody.skeleton} />
            <skinnedMesh name="AvatarLeftCornea" geometry={nodes.AvatarLeftCornea.geometry} material={materials.AvatarLeftCornea} skeleton={nodes.AvatarLeftCornea.skeleton} />
            <skinnedMesh name="AvatarLeftEyeball" geometry={nodes.AvatarLeftEyeball.geometry} material={materials.AvatarLeftEyeball} skeleton={nodes.AvatarLeftEyeball.skeleton} />
            <skinnedMesh name="AvatarRightCornea" geometry={nodes.AvatarRightCornea.geometry} material={materials.AvatarRightCornea} skeleton={nodes.AvatarRightCornea.skeleton} />
            <skinnedMesh name="AvatarRightEyeball" geometry={nodes.AvatarRightEyeball.geometry} material={materials.AvatarRightEyeball} skeleton={nodes.AvatarRightEyeball.skeleton} />
            <skinnedMesh name="AvatarTeethUpper" geometry={nodes.AvatarTeethUpper.geometry} material={materials.AvatarTeethUpper} skeleton={nodes.AvatarTeethUpper.skeleton} />
            <skinnedMesh name="outfit_bottom" geometry={nodes.outfit_bottom.geometry} material={materials.outfit_bottom} skeleton={nodes.outfit_bottom.skeleton} />
            <skinnedMesh name="outfit_shoes" geometry={nodes.outfit_shoes.geometry} material={materials.outfit_shoes} skeleton={nodes.outfit_shoes.skeleton} />
            <skinnedMesh name="outfit_top" geometry={nodes.outfit_top.geometry} material={materials.outfit_top} skeleton={nodes.outfit_top.skeleton} />
            <skinnedMesh name="AvatarEyelashes" geometry={nodes.AvatarEyelashes.geometry} material={materials.AvatarEyelashes} skeleton={nodes.AvatarEyelashes.skeleton} morphTargetDictionary={nodes.AvatarEyelashes.morphTargetDictionary} morphTargetInfluences={nodes.AvatarEyelashes.morphTargetInfluences} />
            <skinnedMesh name="AvatarHead" geometry={nodes.AvatarHead.geometry} material={materials.AvatarHead} skeleton={nodes.AvatarHead.skeleton} morphTargetDictionary={nodes.AvatarHead.morphTargetDictionary} morphTargetInfluences={nodes.AvatarHead.morphTargetInfluences} />
            <skinnedMesh name="AvatarTeethLower" geometry={nodes.AvatarTeethLower.geometry} material={materials.AvatarTeethLower} skeleton={nodes.AvatarTeethLower.skeleton} morphTargetDictionary={nodes.AvatarTeethLower.morphTargetDictionary} morphTargetInfluences={nodes.AvatarTeethLower.morphTargetInfluences} />
          </group>
        </group>
        <Billboard>
        <Text
          position={[0, 1.85, 0]}  // Adjust to control the text height above the avatar
          fontSize={0.15}
          color={id === user ? 'green' : 'gray'}
          anchorX="center"
          anchorY="middle"
        >
          {name}
        </Text>
      </Billboard>
      </group>
    </>

  )
}

useGLTF.preload('/models/AnimatedCharacter.glb')
